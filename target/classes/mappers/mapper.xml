<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.ex.mapper">

<!-- 검색창 select문 -->
<select id="productSearch" resultType="ProductDto">SELECT * from product WHERE pName LIKE CONCAT('%',#{keyword},'%') 
</select>

<!-- 회원 검색창 select문 -->
<select id="memberSearch" resultType="MemberDto">SELECT * from member WHERE mName LIKE CONCAT('%',#{key},'%')
</select>

<!-- 회원정보 select문 -->
<select id="id" resultType="MemberDto">SELECT * from member</select>
<!--mybatis-confix.xml에서 긴 링크글 MemberDto 로 id는 id라고 지정  -->

<!-- 회원가입 insert문 -->
<insert id="register">INSERT INTO member( mId , mPw , mName, mGender, mPhone, mBirth, mEmail, mAddr, mGrade, mNote, mList, mMile, mCumulmile, mMaster)
	                  VALUES(#{mId} , #{mPw}, #{mName}, #{mGender}, #{mPhone}, #{mBirth}, #{mEmail}, #{mAddr}, "브론즈", null, null, 0, 0, 0)</insert>


<!-- 헬스기구 월별 통계 -->
<select id="healthMonthGraph" resultType="hashmap">
	SELECT sCate, DATE_FORMAT(sDate, '%Y-%m') AS order_date, SUM(sPrice) AS Price FROM sell WHERE sCate='헬스기구' GROUP BY order_date
</select>

<!-- 요가상품 월별 통계 -->
<select id="yogaMonthGraph" resultType="hashmap">
	SELECT sCate, DATE_FORMAT(sDate, '%Y-%m') AS order_date, SUM(sPrice) AS Price FROM sell WHERE sCate='요가상품' GROUP BY order_date
</select>

<!-- 운동식품 월별 통계 -->
<select id="foodMonthGraph" resultType="hashmap">
	SELECT sCate, DATE_FORMAT(sDate, '%Y-%m') AS order_date, SUM(sPrice) AS Price FROM sell WHERE sCate='운동식품' GROUP BY order_date
</select>

<!-- 아이디 중복 체크 -->
<select id="idChk" resultType="int">
	SELECT COUNT(*) FROM member
	WHERE mId = #{mId}
</select>

<!--회원수정 update문 -->
<update id="MemberUpdate">UPDATE member SET mEmail = #{mEmail} ,mName =#{mName},
		mPhone =#{mPhone},mAddr=#{mAddr},mPw=#{mPw}
		 WHERE mId = #{mId} 
</update>

<!-- 관리자측 회원수정 update문 -->
<update id="MemberUpdate2">UPDATE member SET mPw = #{mPw}, mName = #{mName}, mGender = #{mGender}, mPhone = #{mPhone},
         mBirth = #{mBirth}, mEmail = #{mEmail}, mAddr = #{mAddr}, mGrade = #{mGrade}, mNote = #{mNote},
         mMaster = #{mMaster}
		 WHERE mId = #{mId} 
</update>

<!-- 로그인 select문 -->
<select id="login" parameterType="MemberDto" resultType="MemberDto">
	select * from member where mId = #{mId} and mPw = #{mPw}
</select>

<!-- 비회원주문조회 select문 -->
<select id="blogin" parameterType="JumunDto" resultType="JumunDto">
	select * from jumun where jId = '비회원주문' and jCustomer = #{jCustomer} and jPhone = #{jPhone}
</select>

<!-- 아이디찾기 select문 -->
<select id="mId" resultType="MemberDto">SELECT * from member WHERE mName =#{mName} and mPhone = #{mPhone}</select>

<!-- 비밀번호찾기 select문 -->
<select id="mPw" resultType="MemberDto">SELECT * from member WHERE mId =#{mId} and mName = #{mName} and mEmail=#{mEmail}</select>

<!-- 회원상세 select문 -->
<select id="memberDetail" resultType="MemberDto">SELECT * from member where mId = #{mId} </select>

<!-- 회원탈퇴 delete -->
<delete id="memberdelete"> delete from member where mId = #{mId} and mPw = #{mPw} </delete>

<!-- 상품리스트 select문 -->
<select id="product" resultType="ProductDto">SELECT * from product</select>

<!-- 상품리스트 select문 -->
<select id="productList" resultType="ProductDto">SELECT * from product</select>

<!-- 관리자토탈 카운트 -->
<select id="productTotalCount" resultType="int">SELECT COUNT(*) from product</select>

<!-- 요가토탈 카운트-->
<select id="yogaTotalCount" resultType="int">SELECT COUNT(*) from product where pCate = '요가상품'</select>

<!-- 음식토탈 카운트 -->
<select id="foodTotalCount" resultType="int">SELECT COUNT(*) from product where pCate = '운동식품'</select>

<!-- 헬스토탈 카운트 -->
<select id="healthTotalCount" resultType="int">SELECT COUNT(*) from product where pCate = '헬스기구'</select>

<!-- 헬스기구 select문 -->
<select id="HealthList" resultType="ProductDto">SELECT * from product where pCate = '헬스기구' order by pCountSell DESC LIMIT #{Page}, #{PageSize}</select>

<!-- 요가상품 select문 -->
<select id="YogaList" resultType="ProductDto">SELECT * from product where pCate = '요가상품' order by pCountSell DESC LIMIT #{Page}, #{PageSize}</select>

<!-- 운동식품 select문 -->
<select id="FoodList" resultType="ProductDto">SELECT * from product where pCate = '운동식품' order by pCountSell DESC LIMIT #{Page}, #{PageSize}</select>

<!-- 관리자 상품관리 페이징 목록 -->
<select id="ProductList" resultType="ProductDto">SELECT * FROM product ORDER BY pNum DESC LIMIT #{Page}, #{PageSize} </select>

<!-- 헬스기구랭킹 select문 -->
<select id="health" resultType="ProductDto">SELECT * from product where pCate = '헬스기구' order by pCountSell DESC</select>

<!-- 요가상품랭킹 select문 -->
<select id="yoga" resultType="ProductDto">SELECT * from product where pCate = '요가상품' order by pCountSell DESC</select>

<!-- 운동식품랭킹 select문 -->
<select id="food" resultType="ProductDto">SELECT * from product where pCate = '운동식품' order by pCountSell DESC</select>

<!-- 남성상품랭킹 select문 -->
<select id="man" resultType="ProductDto">SELECT * from product order by pMan DESC</select>

<!-- 여성상품랭킹 select문 -->
<select id="woman" resultType="ProductDto">SELECT * from product order by pWoman DESC</select>

<!-- 상품정보 select문 -->
<select id="product2" resultType="ProductDto">SELECT * from product where pName = #{pName} </select>

<!-- 상품추가 -->
<insert id="addProduct">
	INSERT INTO product(pNum, pName, pCate, pPrice, pShip, pCount, pCountSell, pCumulSell, pMile, pUrl, pMan, pWoman, pImg)
	values(NEXTVAL(my_seq), #{pName}, #{pCate}, #{pPrice}, #{pShip}, #{pCount}, 0, 0, #{pMile}, #{pUrl}, 0, 0, #{pImg})
</insert>

<!-- 상품수정 -->
<update id="productUpdate">
	UPDATE product SET 
	pName = #{pName}, pPrice = #{pPrice}, pCount = #{pCount}, 
	pShip = #{pShip}, pMile = #{pMile}, pCate = #{pCate} 
	WHERE pUrl = #{pUrl}
</update>

<!-- 상품삭제 delete -->
<delete id="productDelete"> delete from product where pNum = #{pNum}</delete>

<!-- 재고관리 -->
<update id="productAdd">
	UPDATE product SET 
	pCount = #{pCount} 
	WHERE pName = #{pName}
</update>

<!-- 주문내역 select문 -->
<select id="jumun" resultType="JumunDto">SELECT * from jumun order by jNum DESC</select>

<!-- 주문내역 세션값 select문 -->
<select id="jumun2" resultType="JumunDto">SELECT * from jumun where jNum = #{jNum} </select>

<!-- 주문신청 삭제 delete문 -->
<delete id="jumunDelete"> delete from jumun where jNum = #{jNum}</delete>

<!-- 주문내역 승인 update문 -->
<update id="jumunState">UPDATE jumun SET jState = '승인', jShip = '배송중' WHERE jNum = #{jNum} </update>

<!-- 주문내역 배송완료클릭시 sell DB에 판매상품 저장 insert문 -->
<insert id="sellSave">INSERT INTO sell( sProduct , sId , sCate, sPrice, sCount, sCustomer, sGender)
	                  VALUES(#{sProduct}, #{sId}, #{sCate},#{sPrice},#{sCount},#{sCustomer},#{sGender})
</insert>

<!-- 주문내역 배송완료클릭시 update문 -->
<update id="jumunState2">UPDATE jumun SET jFinishDate= NOW() , jShip = '배송완료', jState='배송' WHERE jNum = #{jNum} </update>

<!-- 관리자 주문내역 카운트 -->
<select id="jumunTotalCount" resultType="int">SELECT COUNT(*) from jumun </select>

<!-- 관리자 주문내역 페이징리스트 -->
<select id="jumunList" resultType="JumunDto">SELECT * FROM jumun ORDER BY jNum DESC LIMIT #{Page}, #{PageSize}</select>

<!-- 장바구니 추가 -->
<insert id="addCart">
	insert into cart(cartNum, mId, pNum, cartStock, pPrice, pName, pUrl, pCate, pShip)
     VALUES (NEXTVAL(cart_seq), #{mId}, #{pNum}, #{cartStock}, #{pPrice}, #{pName}, #{pUrl}, #{pCate}, #{pShip})
</insert>
<!-- 장바구니 리스트 -->
<select id="cartList" resultType="CartListVO">
select
     row_number() over(order by c.cartNum desc) as num,
     c.cartNum, c.mId, c.pNum, c.cartStock, c.addDate,
     g.pName, g.pPrice, g.pUrl
 from cart c
     inner join product g
         on c.pNum = g.pNum  
     where c.mId = #{mId}
</select>

<!-- 장바구니 삭제 -->
<delete id="deleteCart"> 
	DELETE from cart where cartNum = #{cartNum}
</delete>

<!-- 고객문의 게시판 목록 select문 -->
<select id="board" resultType="BoardDTO">SELECT * from board order by bNum DESC</select>

<!-- 고객문의 게시판 목록 세션값 select문 -->
<select id="board2" resultType="BoardDTO">SELECT * from board where bNum = #{bNum} </select>

<!-- 고객문의 게시판작성 -->
<insert id="boardWrite">
	insert into board(mName, bNum, bTitle, bNote, bCate, bReply) 
	values(#{mName}, 0, #{bTitle}, #{bNote}, #{bCate}, "답변없음.")
</insert>

<!-- 고객문의 게시글 답변 update문 -->
<update id="boardAnswer">UPDATE board SET bReply = #{bReply} WHERE bNum = #{bNum} </update>

<!-- 고객문의 게시글 삭제 delete문 -->
<delete id="boardDelete"> delete from board where bNum = #{bNum} </delete>

<!-- 고객문의 토탈 카운트 -->
<select id="boardTotalCount" resultType="int">SELECT COUNT(*) from board </select>

<!-- 고객문의 토탈 카운트 -->
<select id="CBoardTotalCount" resultType="int">SELECT COUNT(*) from board </select>

<!-- 고객문의 페이징리스트 -->
<select id="BoardList" resultType="BoardDTO">SELECT * FROM board ORDER BY bNum DESC LIMIT #{Page}, #{PageSize}</select>

<!-- 관리자고객문의 페이징리스트 -->
<select id="CBoardList" resultType="BoardDTO">SELECT * FROM board ORDER BY bNum DESC LIMIT #{Page}, #{PageSize}</select>

<!-- 환불요청 토탈 카운트 -->
<select id="refundTotalCount" resultType="int">SELECT COUNT(*) from refundboard </select>

<!-- 관리자 환불요청 -->
<select id="RefundList" resultType="RefundDto">SELECT * FROM refundboard ORDER BY rNum DESC LIMIT #{Page}, #{PageSize}</select>

<!-- 환불요청 게시판 목록 select문 -->
<select id="refund" resultType="RefundDto">SELECT * from refundboard order by rNum DESC</select>

<!-- 환불요청 게시판 목록 세션값 select문 -->
<select id="refund2" resultType="RefundDto">SELECT * from refundboard where rNum = #{rNum} </select>

<!-- 환불요청 게시판작성 -->
<insert id="refundWrite">insert into refundboard(rNum,rName ,rId, rEmail, rPhone, rGrade,rNumber ,rProduct, rUrl,  rNote, rJumunDate,rFinishDate,rImg,rCheck) values(0,#{rName} ,#{rId}, #{rEmail}, #{rPhone}, #{rGrade},#{rNumber} ,#{rProduct}, #{rUrl}, #{rNote}, #{rJumunDate}, #{rFinishDate},#{rImg} ,0)</insert>

<!-- 환불요청 승락시 update문 -->
<update id="RefundUpdate">UPDATE refundboard SET rCheck = 1 WHERE rNum = #{rNum} </update>

<!-- 환불신청 요청시 주문쪽 환불처리로 변경 update문 -->
<update id="refundJumun">UPDATE jumun SET jShip = '환불요청' WHERE jNum = #{jNum} </update>

<!-- 환불신청 승락시 주문쪽 환불완료로 변경 update문 -->
<update id="jumunRefund">UPDATE jumun SET jShip = '환불완료' WHERE jNum = #{jNum} </update>

<!-- 판매상품 목록 select문 -->
<select id="sell" resultType="SellDto">SELECT * from sell</select>

<!-- 판매상품 목록중 날짜 중복된 데이터값 한개만출력 select문 -->
<select id="sellOne" resultType="SellDto">SELECT * from sell group by sDate</select>

<!-- 판매상품 날짜별 출력 select문 -->
<select id="sellDate" parameterType="SellDto" resultType="SellDto">
	select * from sell where sDate = #{sDate} group by sDate
</select>

<!-- 결제하기 -->
<insert id="cashOk">
	insert into jumun(jNum, jName, jCate, jShipPrice, jMile, jPrice, jCount, jCustomer, jId, jEmail, jAddr, userAddr1, userAddr2, userAddr3, jMailNum, jCatchName, jPhone, jUrl, jShip ,jState, jMemo)
	values(#{jNum}, #{jName}, #{jCate}, #{jShipPrice}, #{jMile}, #{jPrice}, #{jCount}, #{jCustomer}, #{jId}, #{jEmail}, #{jAddr}, 0,0, 0, #{jMailNum}, #{jCatchName}, #{jPhone},#{jUrl}, '배송준비', '미승인', #{jMemo}  )
</insert>

<!-- 카트 비우기 -->
<delete id="cartAllDelete">
	DELETE from cart where cartNum = #{cartNum}
</delete>

<!-- 결제시 마일리지 변화 -->
<update id="cashMile">
	UPDATE member SET mMile = mMile + #{mMile}, mCumulmile = mCumulmile + #{mCumulmile}
	WHERE mId = #{mId}
</update>

<!-- 결제시 마일리지 변화(차감) -->
<update id="cashMile2">
	UPDATE member SET mMile = mMile - #{mMile}
	WHERE mId = #{mId}
</update>

<!-- 상품판매량에따른 변화 -->
<update id="productDecrease">
	UPDATE product SET pCount = pCount-#{pCount}, pCountSell = pCountSell + #{pCount}, pCumulSell = pCumulSell + pPrice * #{pCount} , pMan = pMan + #{pMan} , pWoman = pWoman + #{pWoman}
	WHERE pNum = #{pNum}
</update>

<!-- 상품판매량에따른 변화2 -->
<update id="productDecrease2">
		UPDATE product
SET pCount = pCount - (SELECT  cartStock
               FROM cart
               WHERE pNum = #{pNum} and mId = #{mId}),
pCountSell = pCountSell + (SELECT  cartStock
               FROM cart
               WHERE pNum = #{pNum} and mId = #{mId}),
pCumulSell = pCumulSell + pPrice * (SELECT  cartStock
               FROM cart
               WHERE pNum = #{pNum} and mId = #{mId})
WHERE pNum = #{pNum};
</update>

<!-- 마일리지 차감 -->
<update id="cashMile3">
		UPDATE member
SET mMile = mMile - (SELECT jMile
               FROM jumun
               WHERE jId = #{mId} and pNum = #{pNum} and jNum = #{jNum})
WHERE MID = #{mId};
</update>

<!-- 마일리지 증가 -->
<update id="productDecrease4">
		UPDATE member
SET mMile = mMile + (SELECT  cartStock
               FROM cart
               WHERE pNum = #{pNum} and MID = #{mId}) *
               (SELECT  pPrice
               FROM cart
               WHERE pNum = #{pNum} and MID = #{mId}) /100,
mCumulmile = mCumulmile + (SELECT  cartStock
               FROM cart
               WHERE pNum = #{pNum} and MID = #{mId}) *
               (SELECT  pPrice
               FROM cart
               WHERE pNum = #{pNum} and MID = #{mId}) /100
WHERE MID = #{mId};
</update>

<update id="productDecrease3">
	UPDATE product SET pMan = pMan + #{pMan} , pWoman = pWoman + #{pWoman}
	WHERE pNum = #{pNum}
</update>


<!-- 장바구니 선택결제 -->
<insert id="orderInfo">
 insert into jumun(jNum, jName, jCate, jShipPrice, jMile, jPrice, jCount, jCustomer, jId, jEmail, jAddr, userAddr1, userAddr2, userAddr3, jMailNum, jCatchName, jPhone, jUrl, jShip, jState, jMemo, pNum)
     select #{orderId}, pName, pCate, pShip, #{jMile}, pPrice, cartStock, #{jCatchName}, mId, #{jEmail}, 0, #{userAddr1}, #{userAddr2}, #{userAddr3}, 0, #{jCatchName}, #{jPhone}, pUrl, "배송준비" , "미승인", #{jMemo}, pNum
     	from cart where cartNum = #{cartNum}
</insert>

</mapper>

